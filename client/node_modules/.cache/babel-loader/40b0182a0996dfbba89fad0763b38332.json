{"ast":null,"code":"import { imageUpload } from '../../utils/ImageUpload';\nimport { postAPI, getAPI, putAPI, deleteAPI } from '../../utils/FetchData';\nimport { ALERT } from '../types/alertType';\nimport { GET_HOME_BLOGS, GET_BLOGS_CATEGORY_ID, GET_BLOGS_USER_ID, CREATE_BLOGS_USER_ID, DELETE_BLOGS_USER_ID } from '../types/blogType';\nimport { checkTokenExp } from '../../utils/checkTokenExp';\nexport const createBlog = (blog, token) => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n  let url;\n\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (typeof blog.thumbnail !== 'string') {\n      const photo = await imageUpload(blog.thumbnail);\n      url = photo.url;\n    } else {\n      url = blog.thumbnail;\n    }\n\n    const newBlog = { ...blog,\n      thumbnail: url\n    };\n    const res = await postAPI('blog', newBlog, access_token);\n    dispatch({\n      type: CREATE_BLOGS_USER_ID,\n      payload: res.data\n    });\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getHomeBlogs = () => async dispatch => {\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getAPI('home/blogs');\n    dispatch({\n      type: GET_HOME_BLOGS,\n      payload: res.data\n    });\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getBlogsByCategoryId = (id, search) => async dispatch => {\n  try {\n    let limit = 8;\n    let value = search ? search : `?page=${1}`;\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getAPI(`blogs/category/${id}${value}&limit=${limit}`);\n    dispatch({\n      type: GET_BLOGS_CATEGORY_ID,\n      payload: { ...res.data,\n        id,\n        search\n      }\n    });\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getBlogsByUserId = (id, search) => async dispatch => {\n  try {\n    let limit = 3;\n    let value = search ? search : `?page=${1}`;\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await getAPI(`blogs/user/${id}${value}&limit=${limit}`);\n    dispatch({\n      type: GET_BLOGS_USER_ID,\n      payload: { ...res.data,\n        id,\n        search\n      }\n    });\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: false\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateBlog = (blog, token) => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n  let url;\n\n  try {\n    dispatch({\n      type: ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (typeof blog.thumbnail !== 'string') {\n      const photo = await imageUpload(blog.thumbnail);\n      url = photo.url;\n    } else {\n      url = blog.thumbnail;\n    }\n\n    const newBlog = { ...blog,\n      thumbnail: url\n    };\n    const res = await putAPI(`blog/${newBlog._id}`, newBlog, access_token);\n    dispatch({\n      type: ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteBlog = (blog, token) => async dispatch => {\n  const result = await checkTokenExp(token, dispatch);\n  const access_token = result ? result : token;\n\n  try {\n    dispatch({\n      type: DELETE_BLOGS_USER_ID,\n      payload: blog\n    });\n    await deleteAPI(`blog/${blog._id}`, access_token);\n  } catch (err) {\n    dispatch({\n      type: ALERT,\n      payload: {\n        errors: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"names":["imageUpload","postAPI","getAPI","putAPI","deleteAPI","ALERT","GET_HOME_BLOGS","GET_BLOGS_CATEGORY_ID","GET_BLOGS_USER_ID","CREATE_BLOGS_USER_ID","DELETE_BLOGS_USER_ID","checkTokenExp","createBlog","blog","token","dispatch","result","access_token","url","type","payload","loading","thumbnail","photo","newBlog","res","data","err","errors","response","msg","getHomeBlogs","getBlogsByCategoryId","id","search","limit","value","getBlogsByUserId","updateBlog","_id","success","deleteBlog"],"sources":["/Users/esen/Desktop/MERN stack/client/src/redux/actions/blogAction.ts"],"sourcesContent":["import { Dispatch } from 'redux'\nimport { IBlog } from '../../utils/TypeScript'\nimport { imageUpload } from '../../utils/ImageUpload'\nimport { postAPI, getAPI, putAPI, deleteAPI } from '../../utils/FetchData'\n\nimport { ALERT, IAlertType } from '../types/alertType'\n\nimport {\n  GET_HOME_BLOGS,\n  IGetHomeBlogsType,\n  GET_BLOGS_CATEGORY_ID,\n  IGetBlogsCategoryType,\n  GET_BLOGS_USER_ID,\n  IGetBlogsUserType,\n  CREATE_BLOGS_USER_ID,\n  ICreateBlogsUserType,\n  DELETE_BLOGS_USER_ID,\n  IDeleteBlogsUserType\n} from '../types/blogType'\n\nimport { checkTokenExp } from '../../utils/checkTokenExp'\n\nexport const createBlog = (blog: IBlog, token: string) => \nasync (dispatch: Dispatch<IAlertType | ICreateBlogsUserType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n\n  let url;\n  try {\n    dispatch({ type: ALERT, payload: { loading: true } })\n    \n    if(typeof(blog.thumbnail) !== 'string'){\n      const photo = await imageUpload(blog.thumbnail)\n      url = photo.url\n    }else{\n      url = blog.thumbnail\n    }\n    \n    const newBlog = {...blog, thumbnail: url}\n    \n    const res = await postAPI('blog', newBlog, access_token)\n\n    dispatch({\n      type: CREATE_BLOGS_USER_ID,\n      payload: res.data\n    })\n\n    dispatch({ type: ALERT, payload: { loading: false } })\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: {errors: err.response.data.msg} })\n  }\n}\n\n\nexport const getHomeBlogs = () => \nasync (dispatch: Dispatch<IAlertType | IGetHomeBlogsType>) => {\n  try {\n    dispatch({ type: ALERT, payload: { loading: true } })\n\n    const res = await getAPI('home/blogs')\n\n    dispatch({\n      type: GET_HOME_BLOGS,\n      payload: res.data\n    })\n    \n    dispatch({ type: ALERT, payload: { loading: false } })\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: {errors: err.response.data.msg} })\n  }\n}\n\n\nexport const getBlogsByCategoryId = (id: string, search: string) => \nasync (dispatch: Dispatch<IAlertType | IGetBlogsCategoryType>) => {\n  try {\n    let limit = 8;\n    let value = search ? search : `?page=${1}`;\n\n    dispatch({ type: ALERT, payload: { loading: true } })\n\n    const res = await getAPI(`blogs/category/${id}${value}&limit=${limit}`)\n\n    dispatch({\n      type: GET_BLOGS_CATEGORY_ID,\n      payload: {...res.data, id, search }\n    })\n    \n    dispatch({ type: ALERT, payload: { loading: false } })\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: {errors: err.response.data.msg} })\n  }\n}\n\n\nexport const getBlogsByUserId = (id: string, search: string) => \nasync (dispatch: Dispatch<IAlertType | IGetBlogsUserType>) => {\n  try {\n    let limit = 3;\n    let value = search ? search : `?page=${1}`;\n\n    dispatch({ type: ALERT, payload: { loading: true } })\n\n    const res = await getAPI(`blogs/user/${id}${value}&limit=${limit}`)\n\n    dispatch({\n      type: GET_BLOGS_USER_ID,\n      payload: {...res.data, id, search }\n    })\n    \n    dispatch({ type: ALERT, payload: { loading: false } })\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: {errors: err.response.data.msg} })\n  }\n}\n\n\nexport const updateBlog = (blog: IBlog, token: string) => \nasync (dispatch: Dispatch<IAlertType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  let url;\n  try {\n    dispatch({ type: ALERT, payload: { loading: true } })\n    \n    if(typeof(blog.thumbnail) !== 'string'){\n      const photo = await imageUpload(blog.thumbnail)\n      url = photo.url\n    }else{\n      url = blog.thumbnail\n    }\n    \n    const newBlog = {...blog, thumbnail: url}\n\n    const res = await putAPI(`blog/${newBlog._id}`, newBlog, access_token)\n\n    dispatch({ type: ALERT, payload: { success: res.data.msg } })\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: {errors: err.response.data.msg} })\n  }\n}\n\n\nexport const deleteBlog = (blog: IBlog, token: string) => \nasync (dispatch: Dispatch<IAlertType | IDeleteBlogsUserType>) => {\n  const result = await checkTokenExp(token, dispatch)\n  const access_token = result ? result : token\n  try {\n    dispatch({\n      type: DELETE_BLOGS_USER_ID,\n      payload: blog\n    })\n\n    await deleteAPI(`blog/${blog._id}`, access_token)\n\n  } catch (err: any) {\n    dispatch({ type: ALERT, payload: {errors: err.response.data.msg} })\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}