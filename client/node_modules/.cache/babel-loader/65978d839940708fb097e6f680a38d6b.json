{"ast":null,"code":"const Transport = require(\"../transport\");\n\nconst parser = require(\"engine.io-parser\");\n\nconst parseqs = require(\"parseqs\");\n\nconst yeast = require(\"yeast\");\n\nconst {\n  pick\n} = require(\"../util\");\n\nconst {\n  WebSocket,\n  usingBrowserWebSocket,\n  defaultBinaryType,\n  nextTick\n} = require(\"./websocket-constructor\");\n\nconst debug = require(\"debug\")(\"engine.io-client:websocket\"); // detect ReactNative environment\n\n\nconst isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\n\nclass WS extends Transport {\n  /**\n   * WebSocket transport constructor.\n   *\n   * @api {Object} connection options\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n    this.supportsBinary = !opts.forceBase64;\n  }\n  /**\n   * Transport name.\n   *\n   * @api public\n   */\n\n\n  get name() {\n    return \"websocket\";\n  }\n  /**\n   * Opens socket.\n   *\n   * @api private\n   */\n\n\n  doOpen() {\n    if (!this.check()) {\n      // let probe timeout\n      return;\n    }\n\n    const uri = this.uri();\n    const protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n\n    const opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n\n    try {\n      this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emit(\"error\", err);\n    }\n\n    this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n    this.addEventListeners();\n  }\n  /**\n   * Adds event listeners to the socket\n   *\n   * @api private\n   */\n\n\n  addEventListeners() {\n    this.ws.onopen = () => {\n      if (this.opts.autoUnref) {\n        this.ws._socket.unref();\n      }\n\n      this.onOpen();\n    };\n\n    this.ws.onclose = this.onClose.bind(this);\n\n    this.ws.onmessage = ev => this.onData(ev.data);\n\n    this.ws.onerror = e => this.onError(\"websocket error\", e);\n  }\n  /**\n   * Writes data to socket.\n   *\n   * @param {Array} array of packets.\n   * @api private\n   */\n\n\n  write(packets) {\n    this.writable = false; // encodePacket efficient as it uses WS framing\n    // no need for encodePayload\n\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n      parser.encodePacket(packet, this.supportsBinary, data => {\n        // always create a new object (GH-437)\n        const opts = {};\n\n        if (!usingBrowserWebSocket) {\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (this.opts.perMessageDeflate) {\n            const len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n            if (len < this.opts.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        } // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n\n\n        try {\n          if (usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            this.ws.send(data);\n          } else {\n            this.ws.send(data, opts);\n          }\n        } catch (e) {\n          debug(\"websocket closed before onclose event\");\n        }\n\n        if (lastPacket) {\n          // fake drain\n          // defer to next tick to allow Socket to clear writeBuffer\n          nextTick(() => {\n            this.writable = true;\n            this.emit(\"drain\");\n          }, this.setTimeoutFn);\n        }\n      });\n    }\n  }\n  /**\n   * Called upon close\n   *\n   * @api private\n   */\n\n\n  onClose() {\n    Transport.prototype.onClose.call(this);\n  }\n  /**\n   * Closes socket.\n   *\n   * @api private\n   */\n\n\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n\n\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    let port = \"\"; // avoid port if default for schema\n\n    if (this.opts.port && (\"wss\" === schema && Number(this.opts.port) !== 443 || \"ws\" === schema && Number(this.opts.port) !== 80)) {\n      port = \":\" + this.opts.port;\n    } // append timestamp to URI\n\n\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    } // communicate binary support capabilities\n\n\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n\n    query = parseqs.encode(query); // prepend ? to query\n\n    if (query.length) {\n      query = \"?\" + query;\n    }\n\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n  }\n  /**\n   * Feature detection for WebSocket.\n   *\n   * @return {Boolean} whether this transport is available.\n   * @api public\n   */\n\n\n  check() {\n    return !!WebSocket && !(\"__initialize\" in WebSocket && this.name === WS.prototype.name);\n  }\n\n}\n\nmodule.exports = WS;","map":{"version":3,"names":["Transport","require","parser","parseqs","yeast","pick","WebSocket","usingBrowserWebSocket","defaultBinaryType","nextTick","debug","isReactNative","navigator","product","toLowerCase","WS","constructor","opts","supportsBinary","forceBase64","name","doOpen","check","uri","protocols","extraHeaders","headers","ws","err","emit","binaryType","socket","addEventListeners","onopen","autoUnref","_socket","unref","onOpen","onclose","onClose","bind","onmessage","ev","onData","data","onerror","e","onError","write","packets","writable","i","length","packet","lastPacket","encodePacket","options","compress","perMessageDeflate","len","Buffer","byteLength","threshold","send","setTimeoutFn","prototype","call","doClose","close","query","schema","secure","port","Number","timestampRequests","timestampParam","b64","encode","ipv6","hostname","indexOf","path","module","exports"],"sources":["/Users/esen/Desktop/MERN stack/client/node_modules/engine.io-client/lib/transports/websocket.js"],"sourcesContent":["const Transport = require(\"../transport\");\nconst parser = require(\"engine.io-parser\");\nconst parseqs = require(\"parseqs\");\nconst yeast = require(\"yeast\");\nconst { pick } = require(\"../util\");\nconst {\n  WebSocket,\n  usingBrowserWebSocket,\n  defaultBinaryType,\n  nextTick\n} = require(\"./websocket-constructor\");\n\nconst debug = require(\"debug\")(\"engine.io-client:websocket\");\n\n// detect ReactNative environment\nconst isReactNative =\n  typeof navigator !== \"undefined\" &&\n  typeof navigator.product === \"string\" &&\n  navigator.product.toLowerCase() === \"reactnative\";\n\nclass WS extends Transport {\n  /**\n   * WebSocket transport constructor.\n   *\n   * @api {Object} connection options\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n\n    this.supportsBinary = !opts.forceBase64;\n  }\n\n  /**\n   * Transport name.\n   *\n   * @api public\n   */\n  get name() {\n    return \"websocket\";\n  }\n\n  /**\n   * Opens socket.\n   *\n   * @api private\n   */\n  doOpen() {\n    if (!this.check()) {\n      // let probe timeout\n      return;\n    }\n\n    const uri = this.uri();\n    const protocols = this.opts.protocols;\n\n    // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n    const opts = isReactNative\n      ? {}\n      : pick(\n          this.opts,\n          \"agent\",\n          \"perMessageDeflate\",\n          \"pfx\",\n          \"key\",\n          \"passphrase\",\n          \"cert\",\n          \"ca\",\n          \"ciphers\",\n          \"rejectUnauthorized\",\n          \"localAddress\",\n          \"protocolVersion\",\n          \"origin\",\n          \"maxPayload\",\n          \"family\",\n          \"checkServerIdentity\"\n        );\n\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n\n    try {\n      this.ws =\n        usingBrowserWebSocket && !isReactNative\n          ? protocols\n            ? new WebSocket(uri, protocols)\n            : new WebSocket(uri)\n          : new WebSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emit(\"error\", err);\n    }\n\n    this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n\n    this.addEventListeners();\n  }\n\n  /**\n   * Adds event listeners to the socket\n   *\n   * @api private\n   */\n  addEventListeners() {\n    this.ws.onopen = () => {\n      if (this.opts.autoUnref) {\n        this.ws._socket.unref();\n      }\n      this.onOpen();\n    };\n    this.ws.onclose = this.onClose.bind(this);\n    this.ws.onmessage = ev => this.onData(ev.data);\n    this.ws.onerror = e => this.onError(\"websocket error\", e);\n  }\n\n  /**\n   * Writes data to socket.\n   *\n   * @param {Array} array of packets.\n   * @api private\n   */\n  write(packets) {\n    this.writable = false;\n\n    // encodePacket efficient as it uses WS framing\n    // no need for encodePayload\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n\n      parser.encodePacket(packet, this.supportsBinary, data => {\n        // always create a new object (GH-437)\n        const opts = {};\n        if (!usingBrowserWebSocket) {\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (this.opts.perMessageDeflate) {\n            const len =\n              \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n            if (len < this.opts.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        }\n\n        // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n        try {\n          if (usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            this.ws.send(data);\n          } else {\n            this.ws.send(data, opts);\n          }\n        } catch (e) {\n          debug(\"websocket closed before onclose event\");\n        }\n\n        if (lastPacket) {\n          // fake drain\n          // defer to next tick to allow Socket to clear writeBuffer\n          nextTick(() => {\n            this.writable = true;\n            this.emit(\"drain\");\n          }, this.setTimeoutFn);\n        }\n      });\n    }\n  }\n\n  /**\n   * Called upon close\n   *\n   * @api private\n   */\n  onClose() {\n    Transport.prototype.onClose.call(this);\n  }\n\n  /**\n   * Closes socket.\n   *\n   * @api private\n   */\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    let port = \"\";\n\n    // avoid port if default for schema\n    if (\n      this.opts.port &&\n      ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\n        (\"ws\" === schema && Number(this.opts.port) !== 80))\n    ) {\n      port = \":\" + this.opts.port;\n    }\n\n    // append timestamp to URI\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    // communicate binary support capabilities\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n\n    query = parseqs.encode(query);\n\n    // prepend ? to query\n    if (query.length) {\n      query = \"?\" + query;\n    }\n\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return (\n      schema +\n      \"://\" +\n      (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n      port +\n      this.opts.path +\n      query\n    );\n  }\n\n  /**\n   * Feature detection for WebSocket.\n   *\n   * @return {Boolean} whether this transport is available.\n   * @api public\n   */\n  check() {\n    return (\n      !!WebSocket &&\n      !(\"__initialize\" in WebSocket && this.name === WS.prototype.name)\n    );\n  }\n}\n\nmodule.exports = WS;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}