{"ast":null,"code":"const Transport = require(\"../transport\");\n\nconst parseqs = require(\"parseqs\");\n\nconst parser = require(\"engine.io-parser\");\n\nconst yeast = require(\"yeast\");\n\nconst debug = require(\"debug\")(\"engine.io-client:polling\");\n\nclass Polling extends Transport {\n  /**\n   * Transport name.\n   */\n  get name() {\n    return \"polling\";\n  }\n  /**\n   * Opens the socket (triggers polling). We write a PING message to determine\n   * when the transport is open.\n   *\n   * @api private\n   */\n\n\n  doOpen() {\n    this.poll();\n  }\n  /**\n   * Pauses polling.\n   *\n   * @param {Function} callback upon buffers are flushed and transport is paused\n   * @api private\n   */\n\n\n  pause(onPause) {\n    this.readyState = \"pausing\";\n\n    const pause = () => {\n      debug(\"paused\");\n      this.readyState = \"paused\";\n      onPause();\n    };\n\n    if (this.polling || !this.writable) {\n      let total = 0;\n\n      if (this.polling) {\n        debug(\"we are currently polling - waiting to pause\");\n        total++;\n        this.once(\"pollComplete\", function () {\n          debug(\"pre-pause polling complete\");\n          --total || pause();\n        });\n      }\n\n      if (!this.writable) {\n        debug(\"we are currently writing - waiting to pause\");\n        total++;\n        this.once(\"drain\", function () {\n          debug(\"pre-pause writing complete\");\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n  /**\n   * Starts polling cycle.\n   *\n   * @api public\n   */\n\n\n  poll() {\n    debug(\"polling\");\n    this.polling = true;\n    this.doPoll();\n    this.emit(\"poll\");\n  }\n  /**\n   * Overloads onData to detect payloads.\n   *\n   * @api private\n   */\n\n\n  onData(data) {\n    debug(\"polling got data %s\", data);\n\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      } // if its a close packet, we close the ongoing requests\n\n\n      if (\"close\" === packet.type) {\n        this.onClose();\n        return false;\n      } // otherwise bypass onData and handle the message\n\n\n      this.onPacket(packet);\n    }; // decode payload\n\n\n    parser.decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this.polling = false;\n      this.emit(\"pollComplete\");\n\n      if (\"open\" === this.readyState) {\n        this.poll();\n      } else {\n        debug('ignoring poll - transport state \"%s\"', this.readyState);\n      }\n    }\n  }\n  /**\n   * For polling, send a close packet.\n   *\n   * @api private\n   */\n\n\n  doClose() {\n    const close = () => {\n      debug(\"writing close packet\");\n      this.write([{\n        type: \"close\"\n      }]);\n    };\n\n    if (\"open\" === this.readyState) {\n      debug(\"transport open - closing\");\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      debug(\"transport not open - deferring close\");\n      this.once(\"open\", close);\n    }\n  }\n  /**\n   * Writes a packets payload.\n   *\n   * @param {Array} data packets\n   * @param {Function} drain callback\n   * @api private\n   */\n\n\n  write(packets) {\n    this.writable = false;\n    parser.encodePayload(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emit(\"drain\");\n      });\n    });\n  }\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n\n\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    let port = \"\"; // cache busting is forced\n\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    }\n\n    query = parseqs.encode(query); // avoid port if default for schema\n\n    if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n      port = \":\" + this.opts.port;\n    } // prepend ? to query\n\n\n    if (query.length) {\n      query = \"?\" + query;\n    }\n\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n  }\n\n}\n\nmodule.exports = Polling;","map":{"version":3,"names":["Transport","require","parseqs","parser","yeast","debug","Polling","name","doOpen","poll","pause","onPause","readyState","polling","writable","total","once","doPoll","emit","onData","data","callback","packet","type","onOpen","onClose","onPacket","decodePayload","socket","binaryType","forEach","doClose","close","write","packets","encodePayload","doWrite","uri","query","schema","opts","secure","port","timestampRequests","timestampParam","supportsBinary","sid","b64","encode","Number","length","ipv6","hostname","indexOf","path","module","exports"],"sources":["/Users/esen/Desktop/FIBO homework/client/node_modules/engine.io-client/lib/transports/polling.js"],"sourcesContent":["const Transport = require(\"../transport\");\nconst parseqs = require(\"parseqs\");\nconst parser = require(\"engine.io-parser\");\nconst yeast = require(\"yeast\");\n\nconst debug = require(\"debug\")(\"engine.io-client:polling\");\n\nclass Polling extends Transport {\n  /**\n   * Transport name.\n   */\n  get name() {\n    return \"polling\";\n  }\n\n  /**\n   * Opens the socket (triggers polling). We write a PING message to determine\n   * when the transport is open.\n   *\n   * @api private\n   */\n  doOpen() {\n    this.poll();\n  }\n\n  /**\n   * Pauses polling.\n   *\n   * @param {Function} callback upon buffers are flushed and transport is paused\n   * @api private\n   */\n  pause(onPause) {\n    this.readyState = \"pausing\";\n\n    const pause = () => {\n      debug(\"paused\");\n      this.readyState = \"paused\";\n      onPause();\n    };\n\n    if (this.polling || !this.writable) {\n      let total = 0;\n\n      if (this.polling) {\n        debug(\"we are currently polling - waiting to pause\");\n        total++;\n        this.once(\"pollComplete\", function() {\n          debug(\"pre-pause polling complete\");\n          --total || pause();\n        });\n      }\n\n      if (!this.writable) {\n        debug(\"we are currently writing - waiting to pause\");\n        total++;\n        this.once(\"drain\", function() {\n          debug(\"pre-pause writing complete\");\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n\n  /**\n   * Starts polling cycle.\n   *\n   * @api public\n   */\n  poll() {\n    debug(\"polling\");\n    this.polling = true;\n    this.doPoll();\n    this.emit(\"poll\");\n  }\n\n  /**\n   * Overloads onData to detect payloads.\n   *\n   * @api private\n   */\n  onData(data) {\n    debug(\"polling got data %s\", data);\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      }\n\n      // if its a close packet, we close the ongoing requests\n      if (\"close\" === packet.type) {\n        this.onClose();\n        return false;\n      }\n\n      // otherwise bypass onData and handle the message\n      this.onPacket(packet);\n    };\n\n    // decode payload\n    parser.decodePayload(data, this.socket.binaryType).forEach(callback);\n\n    // if an event did not trigger closing\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this.polling = false;\n      this.emit(\"pollComplete\");\n\n      if (\"open\" === this.readyState) {\n        this.poll();\n      } else {\n        debug('ignoring poll - transport state \"%s\"', this.readyState);\n      }\n    }\n  }\n\n  /**\n   * For polling, send a close packet.\n   *\n   * @api private\n   */\n  doClose() {\n    const close = () => {\n      debug(\"writing close packet\");\n      this.write([{ type: \"close\" }]);\n    };\n\n    if (\"open\" === this.readyState) {\n      debug(\"transport open - closing\");\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      debug(\"transport not open - deferring close\");\n      this.once(\"open\", close);\n    }\n  }\n\n  /**\n   * Writes a packets payload.\n   *\n   * @param {Array} data packets\n   * @param {Function} drain callback\n   * @api private\n   */\n  write(packets) {\n    this.writable = false;\n\n    parser.encodePayload(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emit(\"drain\");\n      });\n    });\n  }\n\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    let port = \"\";\n\n    // cache busting is forced\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    }\n\n    query = parseqs.encode(query);\n\n    // avoid port if default for schema\n    if (\n      this.opts.port &&\n      ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n        (\"http\" === schema && Number(this.opts.port) !== 80))\n    ) {\n      port = \":\" + this.opts.port;\n    }\n\n    // prepend ? to query\n    if (query.length) {\n      query = \"?\" + query;\n    }\n\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return (\n      schema +\n      \"://\" +\n      (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n      port +\n      this.opts.path +\n      query\n    );\n  }\n}\n\nmodule.exports = Polling;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}